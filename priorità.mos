model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

declarations
  S = 1..10
  D = 1..6
  P = 1..3

  K: array(D) of integer
  a: array(S,D,P) of integer
  x: array(S,D,P) of mpvar
  svin: array(S) of linctr

end-declarations

K::[2, 2, 2, 2, 1, 1]

a(1,1,1) := 1
a(1,3,2) := 1
a(2,2,2) := 1
a(2,6,1) := 1
a(3,3,1) := 1
a(3,5,2) := 1
a(4,2,1) := 1
a(4,4,2) := 1
a(5,4,1) := 1
a(5,6,2) := 1
a(6,2,1) := 1
a(6,5,2) := 1
a(7,3,2) := 1
a(7,5,1) := 1
a(8,2,2) := 1
a(8,6,1) := 1
a(9,3,1) := 1
a(9,5,2) := 1
a(10,3,1) := 1
a(10,6,2) := 1


forall(s in S, d in D, p in P) do
	x(s,d,p) is_binary
end-do

forall(d in D) do
	sum(s in S, p in P) x(s,d,p) <= K(d)
end-do

forall(s in S) do
	svin(s) := sum(d in D, p in P) a(s,d,p)*x(s,d,p) = 1
end-do

obj := sum(s in S, d in D) x(s,d,1)

maximize(obj)

if getprobstat = XPRS_INF then

	forall(s in S, d in D) do
    	if a(s,d,1) = 1 then
    	 	if ((d=1) or (d=3) or (d=5)) then
    	 		a(s,d+1,3) := 1
    	 	else
    	 		a(s,d-1,3) := 1
    	 	end-if
    	 end-if
	end-do

	forall(s in S) do
		sethidden(svin(s), true)
		sum(d in D, p in P) a(s,d,p)*x(s,d,p) = 1
	end-do

	maximize(obj)

end-if

end-model

Il coordinatore ERASMUS di Facoltà deve assegnare gli studenti in uscita alle diverse destinazioni con cui esistono dei bilateral agreements. Ogni studente può esprimere due preferenze indicando un ordine di priorità. Vi sono 6 destinazioni disponibili e 10 studenti le cui scelte sono evidenziate in Tabella 1.
D1
D2
D3
D4
D5
 
D6
S1
1
2
S2
2
1
S3
1
2
S4
1
2
S5
1
2
S6
1
2
S7
2
1
S8
2
1
S9
1
2
S10
1
 2
Tabella 1
Ad esempio, lo studente 3 (S3) ha come prima scelta la destinazione 3 (D3) e come seconda scelta la destinazione 5 (D5). Tenendo conto che ogni destinazione può accogliere un numero massimo di studenti come indicato in Tabella 2, il coordinatore ERASMUS invierà tutti gli studenti con l’obiettivo di accontentare il maggior numero possibile di prime
scelte.
Tabella 2
Qualora non sia possibile trovare una soluzione ammissibile, il coordinatore ERASMUS assegna d’ufficio ad ogni studente una destinazione con priorità 3. Questa destinazione è la destinazione ‘affine’ alla destinazione scelta dallo
studente con priorità 1. Si osservi che
− D1 è affine a D2 e viceversa
− D3 è affine a D4 e viceversa
− D5 è affine a D6 e viceversa
Ad esempio, per lo studente 4 (S4) verrà assegnata una priorità 3 alla destinazione 1 (D1).
Il coordinatore ERASMUS cercherà quindi nuovamente di inviare tutti gli studenti con l’obiettivo di accontentare il maggior numero possibile di prime scelte. Si indichi per ogni studente la destinazione assegnata e la priorità corrispondente.
D1
D2
D3
D4
D5
 
D6
Max. Numero Studenti
2
2
2
2
1
1
Si osservi che tutti i problemi devono essere risolti all’interno dello stesso file .mos. Possono risultare utili le seguenti istruzioni:
getprobstat, sethidden, linctr
esempio di utilizzo di linctr (è il type associato ad un vincolo lineare) declarations
T=1..7
PR = 1..5
z: array(PR) of integer x: array(T,PR) of mpvar prvin: array(PR) of linctr
end-declarations
forall(i in PR) do
prvin(i) := sum(t in T) x(t,i) <= z(i) ! è un esempio qualsiasi di vincolo
end-do
forall(i in PR) setthidden(prvin(i), true)