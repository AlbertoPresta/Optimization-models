model ModelName
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

declarations
  classi = 1..5
  scuole = 1..3
  quartieri = 1..2
  
  C: array(classi,scuole) of integer
  D: array(scuole,quartieri) of integer
  Q: array(classi,quartieri) of integer
  
  x: array(classi,scuole,quartieri) of mpvar
  y: array(classi,scuole) of mpvar
end-declarations

C::[20, 30, 25,
	20, 30, 20,
	15, 25, 20,
	15, 25, 15,
	15, 20, 15]

D::[380, 240,
	320, 480,
	175, 90]

Q::[30, 35,
	30, 20,
	17, 23,
	40, 10,
	10, 25]

forall(i in classi, j in scuole, k in quartieri) x(i,j,k) is_integer

forall(i in classi, j in scuole) y(i,j) is_binary

forall(i in classi, k in quartieri) sum(j in scuole) x(i,j,k) = Q(i,k)

forall(i in classi, j in scuole) sum(k in quartieri) x(i,j,k) <= C(i,j)*y(i,j)



costo := sum(i in classi, j in scuole) y(i,j)

setparam("XPRS_VERBOSE", TRUE)
minimize(costo)

writeln("Soluzione: ",getobjval)

forall(i in classi, j in scuole) do
	if (getsol(y(i,j)) = 1) then
		writeln("classe: ",i," in scuola: ",j," numero alunni: ", getsol(sum(k in quartieri)x(i,j,k)))
	end-if
end-do

forall(i in classi) x(i,2,2) = 0

setparam("XPRS_VERBOSE", TRUE)
minimize(costo)
	
end-model